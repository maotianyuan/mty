import{_ as l,c as i,o as e,U as a}from"./chunks/framework.iGn5XQY6.js";const b=JSON.parse('{"title":"通用","description":"","frontmatter":{},"headers":[],"relativePath":"前端/优化/通用优化怎么做.md","filePath":"前端/优化/通用优化怎么做.md","lastUpdated":1731476849000}'),t={name:"前端/优化/通用优化怎么做.md"},s=a(`<h1 id="通用" tabindex="-1">通用 <a class="header-anchor" href="#通用" aria-label="Permalink to &quot;通用&quot;">​</a></h1><h2 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h2><ul><li>防抖 <blockquote><p>场景：直播间元素、聊天发送、互动、锚点、互动、锁屏(最后一次)</p></blockquote></li><li>节流 <blockquote><p>滚动条虚拟列表渲染（最后一次）、</p></blockquote></li><li>requestIdleCallback <blockquote><p>lottie 资源、课件资源后台下载</p></blockquote></li><li>requestAnimationFrame <blockquote><p>页面向上滚动动效 弹幕放到屏幕上</p></blockquote></li><li>setTimeout 替代 setInterval <blockquote><p>无网弹窗、弱音量提示</p></blockquote></li><li>内存泄露 <blockquote><p>释放：URL.revokeObjectURL(this.uniqueAnimationSrc); 意外全局变量、定时器销毁、dom 删除引用还在 WeakMap</p></blockquote></li><li>promise 并行控制 <blockquote><p>Lottie 同时实例化个数</p></blockquote></li><li>事件委托 <blockquote><p>JQ Item list 点击，不用给 每一个 li 都注册监听事件，冒泡机制</p></blockquote></li><li>减少操作 dom，缓存 dom 结果</li><li>IntersectionObserver</li><li>文档碎片 documentFragment<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fragment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDocumentFragment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fragment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dom);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fragment);</span></span></code></pre></div></li><li>克隆节点，修改完再替换原始节点 el.cloneNode(true)</li></ul><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><ul><li><p>加载：</p><ul><li>大小: 删除无用(0单位)、提取公共、异步加载、web 字体</li><li>减少请求：iconfont、base64</li><li>避免：@import</li></ul></li><li><p>解析：</p><ul><li>文件放到最上面</li><li>慎用 * 通配符</li><li>少用表达式 calc</li><li>避免三层嵌套</li><li>不要在 ID 选择器前面进行嵌套其它选择器</li></ul></li><li><p>重绘重排</p><ul><li>脱离普通文档流 absolute fixed (重排开销比较小)</li><li>避免 table 小的改动造成重新布局</li><li>CSS3 硬件加速（GPU 加速） <ul><li>使用 css3 硬件加速，可以让 transform、opacity、filters、 Will-change 这些动画不会引起回流重绘</li><li>比如 background-color 这些，还是会引起回流重绘的</li></ul></li><li>dom 离线处理 display: none 元素不会被渲染，减少重绘回流</li><li>visibility: hidden 的元素只对重绘有影响，不影响重排</li></ul></li><li><p>其他</p><ul><li>使用 CSS font-display 控制字体加载和替换</li><li>尽量使用 css3 代替图片</li></ul></li></ul><p><a href="https://juejin.cn/post/7077347573740077069" target="_blank" rel="noreferrer">https://juejin.cn/post/7077347573740077069</a></p><h2 id="重绘和回流" tabindex="-1">重绘和回流 <a class="header-anchor" href="#重绘和回流" aria-label="Permalink to &quot;重绘和回流&quot;">​</a></h2><ul><li><p>回流：首次渲染、字体大小、resize、尺寸宽高、添加删除 dom、css hover、文字大小图片数量 getBoundingClientRect、getComputedStyle</p></li><li><p>重绘：颜色、边框、visibility background</p></li><li><p>js</p><ul><li>class：合并对 DOM 样式的修改，采用 css class 来修改</li><li>缓存：不要把 DOM 节点的属性值放在一个循环里当成循环里的变量</li><li>requestAnimationFrame: 实现动画</li><li>文档碎片: documentFragment 触发一次重排</li></ul></li><li><p>css</p><ul><li><p>visibility、display: none</p><ul><li>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）</li><li>dom 离线处理 display: none 元素不会被渲染，减少重绘回流</li></ul></li><li><p>table: 不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p></li><li><p>CSS3 硬件加速（GPU 加速）</p><ul><li>使用 css3 硬件加速，可以让 transform opacity filters Will-change 这些动画不会引起回流重绘</li><li>比如 background-color 这些，还是会引起回流重绘的</li><li>使用 transform 替代 top</li></ul></li><li><p>为动画的 HTML 元件使用 fixed 或 absolute 的 position，那么修改他们的 CSS 是不会 reflow 的。脱离普通文档流 absolute fixed, 重排开销小</p></li></ul></li></ul><h2 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h2><ul><li>script 的 defer async <blockquote><p>站长工具 async 不组合其他代码 代码高亮</p></blockquote></li><li>减少 iframe 使用</li></ul><h2 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h2><ul><li>加载： <ul><li>预加载：音频预加载 new window.AudioContext().decodeAudioData 能够以二进制文件流形式去预加载音频</li><li>空闲加载、异步加载</li></ul></li><li>大小：不同环境下加载不同尺寸和像素的图片，使用 media 媒体查询或者 src set 和 sizes 属性</li><li>图片 <ul><li>img lazy=&#39;load&#39; 懒加载</li><li>img 空 src 图片(因为也会发起请求)</li></ul></li></ul><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><ul><li>大小 <ul><li>压缩、</li><li>gzip：nginx 配置打开并且 webpack 配置 compression-webpack-plugin 生成 gzip</li></ul></li><li>次数 <ul><li>雪碧图\\base64\\字体图标减少请求</li><li>减少请求 promise.all</li><li>缓存: 强缓存 cache-control 协商缓存 ETag\\last-modify</li></ul></li><li>通信 <ul><li>DNS：预解析 dns-prefetch</li><li>HTTP2：头部压缩、二进制分帧传输对头阻塞、多路复用，服务器推送</li><li>HTTP3：QUIC UDP 对头阻塞</li><li>HTTP1.1：长链接</li></ul></li><li>服务器 <ul><li>CDN: 公共资源 CDN、容灾</li><li>负载均衡</li></ul></li></ul><h2 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h2><ul><li><p>本地构建</p><ul><li>dll</li><li>分模块构建</li><li>happypack thread</li><li>缓存 hard-source、cache-loader cacheDirectory</li><li>alias</li><li>extensions 依次尝试添加扩展名匹配，高频放前</li><li>noParse 无依赖的不需要解析，提高整体构建速度</li><li>lintOnSave build 关闭</li><li>IgnorePlugin: 不把制定模块打包进去 moment</li></ul></li><li><p>打包</p><ul><li>dll</li><li>external</li><li>compression-webpack-plugin</li><li>分包 optimization splitChunk: lottie 异步加载</li><li>preload 预加载</li><li>prefetch 空闲时候下载</li><li>js 压缩 terserplugin</li><li>image-webpack-loader</li><li>tree-shaking</li><li>webpackChunkName 添加名称</li><li>lodash 模块引入</li></ul></li><li><p>骨架屏</p></li><li><p>占位图</p></li></ul><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h2><p><code>v-if v-for data router 懒加载 nextTick element-ui keep-alive </code></p><ul><li>v-if</li><li>不要将所有数据放 data 中 no reactive data, object.freeze</li><li>v-for 添加 key</li><li>router 懒加载</li><li>异步更新 nextTick</li><li>第三方插件异步引入 element-ui</li><li>preload</li><li>prefetch</li><li>keep-alive 缓存</li><li>mixin 滥用，覆盖哪个是哪个</li><li>虚拟 DOM</li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>Gift 图片做埋点 <blockquote><p>不携带 cookie 大小最小 不跨域 不阻塞页面加载 get 之后不需要获取和处理数据，服务器也不需要发送数据</p></blockquote></li></ul><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><ul><li>Performance</li><li>LightHouse</li><li>FMP 首次有效绘制(First Meaningful Paint)</li><li>TTI Time to interactive，记录从页面加载开始，到页面处于完全可交互状态所花费的时间。</li><li>加载性能 LCP，交互性 FID，视觉稳定性 CLS</li></ul>`,23),o=[s];function n(r,p,c,u,h,d){return e(),i("div",null,o)}const m=l(t,[["render",n]]);export{b as __pageData,m as default};
