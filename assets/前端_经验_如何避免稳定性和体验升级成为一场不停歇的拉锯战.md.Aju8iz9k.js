import{_ as a,c as e,o as r,U as t}from"./chunks/framework.iGn5XQY6.js";const b=JSON.parse('{"title":"如何避免稳定性和体验升级成为一场不停歇的拉锯战","description":"","frontmatter":{},"headers":[],"relativePath":"前端/经验/如何避免稳定性和体验升级成为一场不停歇的拉锯战.md","filePath":"前端/经验/如何避免稳定性和体验升级成为一场不停歇的拉锯战.md","lastUpdated":1721650796000}'),i={name:"前端/经验/如何避免稳定性和体验升级成为一场不停歇的拉锯战.md"},h=t('<h1 id="如何避免稳定性和体验升级成为一场不停歇的拉锯战" tabindex="-1">如何避免稳定性和体验升级成为一场不停歇的拉锯战 <a class="header-anchor" href="#如何避免稳定性和体验升级成为一场不停歇的拉锯战" aria-label="Permalink to &quot;如何避免稳定性和体验升级成为一场不停歇的拉锯战&quot;">​</a></h1><h2 id="一、摘要" tabindex="-1">一、摘要 <a class="header-anchor" href="#一、摘要" aria-label="Permalink to &quot;一、摘要&quot;">​</a></h2><p>当产品发展到一定程度，可能会遇到稳定性问题与体验问题，两者或单独遇到或同时遇到。当同时遇到时，如何避免稳定性和体验升级成为一场不停歇的拉锯战。如果你也有同样的问题，那怎么解决，本文将会对此话题进行探讨。</p><h2 id="二、稳定性和体验简介" tabindex="-1">二、稳定性和体验简介 <a class="header-anchor" href="#二、稳定性和体验简介" aria-label="Permalink to &quot;二、稳定性和体验简介&quot;">​</a></h2><p>为方便下文的探讨，将会对什么是稳定性问题，什么是体验性问题，做下基础的简单介绍。</p><h3 id="_2-1-什么是稳定性问题" tabindex="-1">2.1 什么是稳定性问题 <a class="header-anchor" href="#_2-1-什么是稳定性问题" aria-label="Permalink to &quot;2.1 什么是稳定性问题&quot;">​</a></h3><p>当一款产品，一会儿能用一会儿不能用，现象为：突发的某段时间批量用户集中无法使用。 举个例子：软件突然无法支付、博客突然无法访问、按钮点击失效等等，这就是稳定性问题。 软件提供的基础功能无法正常使用。</p><h3 id="_2-2-什么是体验问题" tabindex="-1">2.2 什么是体验问题 <a class="header-anchor" href="#_2-2-什么是体验问题" aria-label="Permalink to &quot;2.2 什么是体验问题&quot;">​</a></h3><p>一款产品功能已经满足了用户的诉求，为了让用户使用起来更加舒适、沉浸、愉快等；全方位各个细节的提升用户的感官感受。 拿最基础的按钮来举例：按钮几个状态是否都有反馈：点击、悬浮、点击过、点击中（增加转圈的 loading 告知用户一致在等待，而不是没反应）、点击完成。 再到到静态背景升级 3D 炫酷的动画；各个环节细节的打磨，增加用户沉浸式体验，带给用户最舒适的感受。</p><h2 id="三、统一宗旨" tabindex="-1">三、统一宗旨 <a class="header-anchor" href="#三、统一宗旨" aria-label="Permalink to &quot;三、统一宗旨&quot;">​</a></h2><p>一款存在多年的 2C 产品维护过程中，遇到稳定性和体验问题概率比较高。 为什么这么说呢，当产品用户量足够多，需求也随之变多，就需要更加专业的人才过来，不同的角色职能就有所不同；秉持着专业的人做专业的事情。 研发负责实现需求，保证系统运行的稳定性和性能是重要职责； 设计负责提升样式效果； 产品需要满足业务的诉求； 当产品逐渐成型，功能整体完善，视觉体验就变得更加重要；在保证稳定性的基础之上，完成业务诉求，提升用户体验。是所有角色的统一宗旨。 当团队变大角色变多，在加之团队成员一定的流动性、各角色之间形成一定的边界；若此时大家对于宗旨的认知达不成一致，各个角色对目标有所偏颇，那可能就造成拉锯战。</p><h2 id="四、为什么是一场拉锯战" tabindex="-1">四、为什么是一场拉锯战 <a class="header-anchor" href="#四、为什么是一场拉锯战" aria-label="Permalink to &quot;四、为什么是一场拉锯战&quot;">​</a></h2><p>研发侧实现需要保稳定性，设计侧需要发挥创造力打磨好用户体验。 当动效足够多、列表足够长、全屏元素过多、色彩图片足够丰富等类似这一系列的体验升级，都会对性能造成一定的挑战。 虽然大家本质都为了追求更好的结果。但性能和体验在一定程度上，有互斥的成本。 设计为体验更加好，上了很多炫酷的动效，研发为了保证稳定性，对炫酷的动效说实现不了。 设计说已经减无可减，不能再小了；研发说超了不行，再减点，内存 CPU 还超标。好不容易内存、CPU 控制在一定范围内，设计说效果不行。 一来一回反复调整，最好的结局便是在反复调整过程中，调整到双方都能满意的结果。 但若一方无法让步，一方不寻求最优解，各自站在自己的立场上，互相觉着对方能力不行，这场拉锯战便会不停歇，问题也随之上升。</p><h3 id="_4-1-口舌之争-动画资源大小" tabindex="-1">4.1 口舌之争-动画资源大小 <a class="header-anchor" href="#_4-1-口舌之争-动画资源大小" aria-label="Permalink to &quot;4.1 口舌之争-动画资源大小&quot;">​</a></h3><p>下面的对话相信部分人遇到过类似的。</p><ul><li>研发：2M 动画资源，闹着玩呢，实现不了，上去也会返工，都不用试，效果肯定要打折</li><li>产品怎么一上来总是说实现不了，你试了吗就说实现不了</li><li>研发：这都不用试，这是常识你懂么？</li><li>产品：效果肯定不能打折扣 这是底线吧，效果若不及预期，体验这个事，还有啥可忙活的，对吧</li><li>研发：上了就崩，性能谁来保证？</li></ul><p>随着参与人越多，七嘴八舌问题越来越没用眉目, 问题上升。</p><h3 id="_4-2-勉强妥协-资源删减无限尝试" tabindex="-1">4.2 勉强妥协-资源删减无限尝试 <a class="header-anchor" href="#_4-2-勉强妥协-资源删减无限尝试" aria-label="Permalink to &quot;4.2 勉强妥协-资源删减无限尝试&quot;">​</a></h3><p>问题上升后，各个领导先确认问题，好研发说不行，那就拉着 QA 确认测试结果，证明给各个角色来看，确认问题。 寻求解决方案：为保证如期交付给业务，先尝试最快的方式解决问题，既然是资源的大小造成的稳定性问题，我们减效果再试，这就一天过去了。 一天(UI 修改设计稿) 过去，一天（研发修改）在测试，发现还不行，再减效果。 一天一天又一天，来来回回反复尝试了一周，耐心消磨殆尽。不得已更换技术方案，重新排期。</p><h3 id="_4-3-为何原技术方案搞不定" tabindex="-1">4.3 为何原技术方案搞不定 <a class="header-anchor" href="#_4-3-为何原技术方案搞不定" aria-label="Permalink to &quot;4.3 为何原技术方案搞不定&quot;">​</a></h3><p>本质内存过高造成的 webview 容器挂掉，那为什么要用 webview。 原生带来的问题是开发和维护成本变高，需要双端。并且原生实现规范没变。</p><h3 id="_4-4-研发资源投入多少" tabindex="-1">4.4 研发资源投入多少 <a class="header-anchor" href="#_4-4-研发资源投入多少" aria-label="Permalink to &quot;4.4 研发资源投入多少&quot;">​</a></h3><p>研发投入多少, 研发的 ROI 是否得以保证，产品和研发需要进一步进行商讨，需要与领导确认，并达成一致。 既投入这么多研发资源做出来的效果，需要对 NPS 反馈指标是否在预期之内进行把控，别费劲吧啦做完，后面用户没感知。 当然最主要的是通过数据的反馈，指引到正确的方向。</p><h2 id="五、如何避免" tabindex="-1">五、如何避免 <a class="header-anchor" href="#五、如何避免" aria-label="Permalink to &quot;五、如何避免&quot;">​</a></h2><p>经过上面一系列的探讨，我们达成了共识，这段时间体验升级的确为重要了一环，研发可以投入部分资源去进行体验的升级。 在讨论如何避免之前，我们需要意识，彼此信任、彼此相辅相成，互惠互利，目标一致。若宗旨无法达成一致，那接下来的避免将无从谈起。 那如何避免成为一场拉锯战，让目标顺利实现呢，让问题不在发酵，矛盾不在激化，合作更加愉快。</p><h3 id="_5-1-睁一只眼闭一只眼" tabindex="-1">5.1 睁一只眼闭一只眼 <a class="header-anchor" href="#_5-1-睁一只眼闭一只眼" aria-label="Permalink to &quot;5.1 睁一只眼闭一只眼&quot;">​</a></h3><p>研发睁一只眼闭一只眼，给我多大的资源就用多大的资源，不压缩不看数据，直接上线吧，实现效果嘛很简单、任务完成皆大欢喜。 然可能既不好看也不好用了，当上去后稳定性遇到了问题(每天投诉电话源源不断，客速率急剧提升)，事故随之而来，麻烦接踵而至，用户投诉无穷无尽；各个角色不得已重新返工。 逃避方式解决问题，问题终将暴露，当然这是闹着玩的。</p><h3 id="_5-2-工具" tabindex="-1">5.2 工具 <a class="header-anchor" href="#_5-2-工具" aria-label="Permalink to &quot;5.2 工具&quot;">​</a></h3><h4 id="_5-2-1-性能数据度量" tabindex="-1">5.2.1 性能数据度量 <a class="header-anchor" href="#_5-2-1-性能数据度量" aria-label="Permalink to &quot;5.2.1 性能数据度量&quot;">​</a></h4><p>具有性能数据度量工具是最重要的基础，团队内需要具有这种工具。 例如：体验升级中的元素：图片(PNG\\GIF\\JEG)、音视频、动效(Lottie、APNG)不同资源类型，大小、帧、尺寸给到多大合适， 团队内性能数据工具，统计的数据是否靠谱，测出来的数据是否能预判出问题，最终需要得出结论。如：当指标（CPU 和 内存）超过多少(数值)，对稳定性会有挑战。</p><h4 id="_5-2-2-数据功能的监测" tabindex="-1">5.2.2 数据功能的监测 <a class="header-anchor" href="#_5-2-2-数据功能的监测" aria-label="Permalink to &quot;5.2.2 数据功能的监测&quot;">​</a></h4><p>上线后数据功能的监测，也是工具的一环，是监测同时也是验证，监测数据劣变，增强稳定性。</p><h3 id="_5-3-标准规范制定" tabindex="-1">5.3 标准规范制定 <a class="header-anchor" href="#_5-3-标准规范制定" aria-label="Permalink to &quot;5.3 标准规范制定&quot;">​</a></h3><p>当有了性能数据工具，各种资源将会给予一定的标准产出，有了这份标准，设计就会在产出之前就知道是否达标，缩短的沟通和返工时间，提高了效率。 例如：图片资源需要小于 10kb、Lottie 需要小于 50kb、帧需要在 7-20 之间； 故具体标准的数据制定需要，基于数据支撑上，各个角色共同商定达成一致，且随着产品发展有所适配调整的数据； 统一共识：务必严格遵守规范。数据不在标准范围内，会对稳定性造成一定影响。</p><h3 id="_5-4-系统限制" tabindex="-1">5.4 系统限制 <a class="header-anchor" href="#_5-4-系统限制" aria-label="Permalink to &quot;5.4 系统限制&quot;">​</a></h3><p>为避免口口相传造成的标准的丢失，各类素材能做到后台管理的，就做到后台，上传的同时给予严格的系统的限制，并温馨给予提示，避免人员流动造成规范的消失。</p><h3 id="_5-5-宣讲" tabindex="-1">5.5 宣讲 <a class="header-anchor" href="#_5-5-宣讲" aria-label="Permalink to &quot;5.5 宣讲&quot;">​</a></h3><p>标准制定之后，形成文档，并需要在团队内宣讲同步，确保当前各个角色认同，并达成一致，为后续合作打好基础。</p><h3 id="_5-6-nps-的同步" tabindex="-1">5.6 NPS 的同步 <a class="header-anchor" href="#_5-6-nps-的同步" aria-label="Permalink to &quot;5.6 NPS 的同步&quot;">​</a></h3><p>产品及时追踪 NPS 数据结果，并及时同步团队。无论数据好坏，对于团队来说都是一种反馈。 数据有所提升，告知研发做的不是无用功，付出有所收获，并对后续的产品规划增强了信心，研发更有干劲，也增强的团队凝聚力。 数据有所偏颇时，也不进行包庇，提醒产品和设计及时调整方向，避免无意义的资源投入。</p><h2 id="六、最后" tabindex="-1">六、最后 <a class="header-anchor" href="#六、最后" aria-label="Permalink to &quot;六、最后&quot;">​</a></h2><p>研发需要努力探索不同技术方案，承接更加复杂的设计元素，提升标准承载的阀值。 设计也需要有这种意识：体验效果升级，或许有时候，并非只是炫酷大屏动态效果的叠加。 当然，多站在对方立场考虑，目标一致，好好沟通，同样也很重要，指责命令方式沟通容易造成矛盾激化，也不可取。</p>',42),o=[h];function l(n,d,_,s,c,p){return r(),e("div",null,o)}const q=a(i,[["render",l]]);export{b as __pageData,q as default};
