import{_ as a,c as s,o as t,U as i}from"./chunks/framework.iGn5XQY6.js";const k=JSON.parse('{"title":"寻找统一与定制的平衡点：我们直播间的五年演进之路","description":"","frontmatter":{},"headers":[],"relativePath":"前端/经验/寻找统一与定制的平衡点：我们直播间的五年演进之路.md","filePath":"前端/经验/寻找统一与定制的平衡点：我们直播间的五年演进之路.md","lastUpdated":1761896574000}'),p={name:"前端/经验/寻找统一与定制的平衡点：我们直播间的五年演进之路.md"},e=i(`<h1 id="寻找统一与定制的平衡点-我们直播间的五年演进之路" tabindex="-1">寻找统一与定制的平衡点：我们直播间的五年演进之路 <a class="header-anchor" href="#寻找统一与定制的平衡点-我们直播间的五年演进之路" aria-label="Permalink to &quot;寻找统一与定制的平衡点：我们直播间的五年演进之路&quot;">​</a></h1><p>回头看我们直播间业务的发展，就像看着一个孩子长大——从最初的单一模式，到后来的&quot;分家单干&quot;，再到现在的&quot;分久必合&quot;，每一步都是摸着石头过河。</p><h2 id="一、起步阶段-业务驱动的野蛮生长" tabindex="-1">一、起步阶段：业务驱动的野蛮生长 <a class="header-anchor" href="#一、起步阶段-业务驱动的野蛮生长" aria-label="Permalink to &quot;一、起步阶段：业务驱动的野蛮生长&quot;">​</a></h2><p>记得五年前，我们只有一种直播间——那个被称为&quot;三分屏&quot;的固定模式。随着业务拓展，各个学科都提出了自己的需求：</p><p>&quot;我们英语需要PK功能&quot; &quot;数学要有个填空卡&quot; &quot;语文需要朗读点评&quot;</p><p>于是，小数直播间、小英直播间、小语直播间、IMC直播间相继诞生。每个学科都有自己的专属直播间，就像给每个孩子都准备了独立的房间。是的我们采用了典型的业务驱动架构模式。</p><p>当时的技术选择很直接：每个直播间独立开发，代码各写各的，项目、容器、域名全都分开申请。 好处是：改动不会互相影响，开发速度快，快速响应各业务特定需求。</p><p>现在回想起来，这种模式在业务从 0 到 1 的阶段确实帮了大忙。毕竟那时候，快速验证业务模式比代码优雅更重要。</p><h2 id="二、成长的烦恼-重复造轮子的痛苦" tabindex="-1">二、成长的烦恼：重复造轮子的痛苦 <a class="header-anchor" href="#二、成长的烦恼-重复造轮子的痛苦" aria-label="Permalink to &quot;二、成长的烦恼：重复造轮子的痛苦&quot;">​</a></h2><p>随着业务发展，问题开始显现。最让我头疼的是那个&quot;聊天区头像&quot;功能。</p><p>产品经理说：&quot;所有直播间都要支持用户头像展示。&quot;</p><p>于是，小数直播间开发一遍，小英直播间复制一份改改，小语直播间再来一次...同样的功能，我看着团队前前后后写了四遍。虽然每次都是复制粘贴，但总有些细微的调整：小数要支持勋章展示，小英要有个性化边框，小语要支持语音消息...</p><p>更让人崩溃的是：互动题功能每个直播间都要做, 每次新增业务都要重新申请资源, 修一个bug要在四个项目里分别修复</p><p>短期来看，这种模式确实影响面小、风险可控。但长期来看，团队陷入了&quot;开发-复制-修改&quot;的恶性循环。大家开始抱怨：&quot;我们不是在创新，我们是在重复劳动。&quot;</p><p>重复开发问题凸显、资源开销已然不可忽视、代码碎片化严重、长期维护成本高昂。</p><h2 id="三、统一之路-配置化平台的理想与现实" tabindex="-1">三、统一之路：配置化平台的理想与现实 <a class="header-anchor" href="#三、统一之路-配置化平台的理想与现实" aria-label="Permalink to &quot;三、统一之路：配置化平台的理想与现实&quot;">​</a></h2><p>痛定思痛，我们开始推动统一化。核心理念是：从“按业务定义直播间”转向“按功能配置直播间”，通过配置化实现业务差异。</p><p>我们设计的配置体系包括： 直播/回放模式切换 拉流方式选择 学生区域展示内容（视频流、头像墙等）</p><p>功能模块组合配置 理想很美好：新业务只需要配一下就能上线，共同功能开发一次大家都能用。实际上，初期确实看到了效果——新业务上线速度从2周缩短到2天。</p><p>渐渐的，新的问题出现了。</p><h2 id="四、统一后的新挑战-当简单变复杂" tabindex="-1">四、统一后的新挑战：当简单变复杂 <a class="header-anchor" href="#四、统一后的新挑战-当简单变复杂" aria-label="Permalink to &quot;四、统一后的新挑战：当简单变复杂&quot;">​</a></h2><p>在数字化直播间。有个特殊需求：下课后时间依然在变。这个功能其他学科都用不到。</p><p>如果为了这一个需求在统一平台里增加配置，会让系统变得更复杂。 结果你猜怎么着？开发同学直接在配置平台的基础上，写了一段硬编码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (businessType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;digital&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 数字化特殊逻辑</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderAttentionCurve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这成了我们系统的&quot;特权代码&quot;。虽然违背了统一平台的初衷，但确实解决了当下的业务需求。</p><ul><li>配置化本身的挑战也不小： <ul><li><strong>配置复杂度爆炸：</strong> 配置项越来越多，新同学要看半天才能理解，有些配置之间还存在依赖关系，一不小心就掉坑里，新增配置需要考虑对现有业务影响。</li><li><strong>影响面控制难题</strong>：改一个配置可能影响所有业务，测试工作量巨大</li><li><strong>配置设计的平衡艺术</strong>：过度细化的配置增加了使用复杂度，需要找到合适的抽象层级</li><li><strong>功能组合的思考</strong>：相关功能是否应该打包成功能组合、配置开关需要适当收敛，避免碎片化</li></ul></li></ul><h2 id="五、找到平衡-分层治理的实践" tabindex="-1">五、找到平衡：分层治理的实践 <a class="header-anchor" href="#五、找到平衡-分层治理的实践" aria-label="Permalink to &quot;五、找到平衡：分层治理的实践&quot;">​</a></h2><p>经过多次试错，我们逐渐找到了适合自己的平衡点——分层治理策略。</p><p>核心层（必须统一）：直播拉流、信令通信这些基础能力、安全规范和监控体系。就像房子的地基，必须牢固统一</p><p>业务层（配置化实现）：通过配置满足大部分业务差异；比如是否显示头像、是否支持回放。像房子的装修，可以通过不同风格满足需求</p><p>扩展层（允许定制）：真正特殊的业务需求通过插件化实现；比如数字化的注意力分析功能。像房子的扩展空间，需要时再加建</p><h2 id="六、治理机制-让系统持续健康" tabindex="-1">六、治理机制：让系统持续健康 <a class="header-anchor" href="#六、治理机制-让系统持续健康" aria-label="Permalink to &quot;六、治理机制：让系统持续健康&quot;">​</a></h2><p>光有架构不够，还需要配套的治理机制。</p><p>配置治理方面： 我们建立了配置项生命周期管理，每季度回顾一次配置项的使用情况。发现有些配置项从来没人用过，就果断下线。</p><p>代码治理方面： 我们设置了代码重复度检测，定期重构消除重复。对于业务特定的代码，要求必须有明确的升级路径。</p><p>组织架构调整： 我们成立了平台团队负责核心架构，业务团队基于平台能力快速迭代。这种模式既保证了技术底座的稳定，又给了业务创新的空间。</p><h2 id="七、写在最后-平衡的艺术" tabindex="-1">七、写在最后：平衡的艺术 <a class="header-anchor" href="#七、写在最后-平衡的艺术" aria-label="Permalink to &quot;七、写在最后：平衡的艺术&quot;">​</a></h2><p>五年过去了，我深深体会到：没有一劳永逸的解决方案，只有持续演进和优化的过程。在统一和定制之间找平衡，就像走钢丝——太偏向统一，会扼杀业务创新；太偏向定制，会导致系统腐化。 架构的本质就是在不断变化的业务需求和技术环境中，找到最适合当前阶段的平衡点。</p><p>我们的经验教训：</p><p>没有银弹：不要追求完美的解决方案，适合当前阶段的才是最好的 保持敏感：要能感知到什么时候该统一，什么时候该放开 建立机制：比单次决策更重要的是建立持续优化的机制</p><p>现在，当新的业务需求过来时，我们会先问三个问题： 这个需求是暂时的还是长期的？ 其他业务未来会有类似需求吗？ 通过配置还是扩展来实现更合适？</p><p>这种思维方式的转变，或许比任何技术方案都更有价值。</p><p>回头看，这一路的磕磕绊绊都是宝贵的财富。最好的平衡不是消灭张力，而是学会驾驭张力，让统一和定制这对看似矛盾的力量，共同推动系统向前发展。</p><p>毕竟，架构的本质就是在不断变化的环境中，找到那个最适合当下的平衡点。而这，正是软件工程最迷人的地方。</p>`,44),n=[e];function l(o,h,r,d,u,_){return t(),s("div",null,n)}const q=a(p,[["render",l]]);export{k as __pageData,q as default};
